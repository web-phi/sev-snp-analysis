theory SEV_SNP_MEMORY begin

builtins: symmetric-encryption

functions:
    HYPERVISOR/0,
    FIRMWARE/0,
    GUEST/3,
    VALID/0,
    INVALID/0,
    owner/1,
    gpa/1,
    validated/1

equations:
    owner(HYPERVISOR) = HYPERVISOR,
    owner(FIRMWARE) = FIRMWARE,
    owner(GUEST(x,y,z)) = x,
    gpa(GUEST(x,y,z)) = y,
    validated(GUEST(x,y,z)) = z

rule InitializePage:
    [
        Fr(SPA)
    ]
    --[ 
        InitializePage(SPA),
        RMPUpdate(SPA, '0', HYPERVISOR)
    ]->
    [ 
        !SystemPA(SPA),
        RMPEntry(SPA, HYPERVISOR),
        PageContent(SPA, '0')
    ]

rule InitializeGuest:
    [ 
        Fr(GID)
    ]
    --[ 
        InitializeGuest(GID)
    ]->
    [ 
        !GuestID(GID)
    ]

rule GenerateHypervisorLtk:
    [
        Fr(ltk)
    ]
    --[
        GenerateHypervisorLtk(ltk)
    ]->
    [
        !Ltk(ltk, HYPERVISOR)
    ]

rule GenerateFirmwareLtk:
    [
        Fr(ltk)
    ]
    --[
        GenerateFirmwareLtk(ltk)
    ]->
    [
        !Ltk(ltk, FIRMWARE)
    ]

rule GenerateGuestLtk:
    [
        Fr(ltk),
        !GuestID(GID)
    ]
    --[
        GenerateGuestLtk(ltk, GID)
    ]->
    [
        !Ltk(ltk, GID)
    ]

rule AssignPageToFW:
    [
        !SystemPA(SPA),
        RMPEntry(SPA, HYPERVISOR)
    ]
    --[
        RMPUpdate(SPA, HYPERVISOR, FIRMWARE)
    ]->
    [
        RMPEntry(SPA, FIRMWARE)
    ]

rule AssignPageToGVM:
    [
        !SystemPA(SPA),
        RMPEntry(SPA, HYPERVISOR),
        !GuestID(GID),
        Fr(GPA)
    ]
    --[
        RMPUpdate(SPA, HYPERVISOR, GUEST(GID, GPA, INVALID))
    ]->
    [
        RMPEntry(SPA, GUEST(GID, GPA, INVALID))
    ]

rule ReturnPageFromGVM:
    [
        !SystemPA(SPA),
        RMPEntry(SPA, GUEST(GID, GPA, isValid))
    ]
    --[
        RMPUpdate(SPA, GUEST(GID, GPA, isValid), HYPERVISOR)
    ]->
    [
        RMPEntry(SPA, HYPERVISOR)
    ]

rule ReturnPageFromFW:
    [
        !SystemPA(SPA),
        RMPEntry(SPA, FIRMWARE)
    ]
    --[
        RMPUpdate(SPA, FIRMWARE, HYPERVISOR)
    ]->
    [
        RMPEntry(SPA, HYPERVISOR)
    ]

rule GuestValidate:
    [
        !SystemPA(SPA),
        !GuestID(GID),
        RMPEntry(SPA, GUEST(GID, GPA, INVALID))
    ]
    --[
        RMPUpdate(SPA, GUEST(GID, GPA, INVALID), GUEST(GID, GPA, VALID))
    ]->
    [
        RMPEntry(SPA, GUEST(GID, GPA, VALID))
    ]

rule WriteToPage:
    [
        !SystemPA(SPA),
        !Ltk(ltk, owner(owner)),
        RMPEntry(SPA, owner),
        In(newContentEncrypted),
        PageContent(SPA, oldContent)
    ]
    --[
        Write(SPA, owner, sdec(<ltk, SPA>, newContentEncrypted))
    ]->
    [
        RMPEntry(SPA, owner),
        PageContent(SPA, sdec(<ltk, SPA>, newContentEncrypted))
    ]

rule ReadFromPage:
    [ 
        !SystemPA(SPA),
        !Ltk(ltk, owner(owner)),
        RMPEntry(SPA, owner),
        PageContent(SPA, content)
    ]
    --[
        Read(SPA, owner, content)
    ]->
    [
        RMPEntry(SPA, owner),
        PageContent(SPA, content),
        Out(senc(<ltk, SPA>, content))
    ]

lemma ExePageCanGoFromFWToGVM: exists-trace
"
    Ex SPA owner1 owner2 GID GPA isValid #i #j. 
    RMPUpdate(SPA, owner1, FIRMWARE) @ i 
    & RMPUpdate(SPA, owner2, GUEST(GID, GPA, isValid)) @ j
    & (#i < #j)
"

lemma ExePageCanBeGivenToSameGVMTwice: exists-trace
"
    Ex SPA owner1 owner2 GID GPA1 GPA2 isValid1 isValid2 #i #j. 
    RMPUpdate(SPA, owner1, GUEST(GID, GPA1, isValid1)) @ i
    & RMPUpdate(SPA, owner2, GUEST(GID, GPA2, isValid2)) @ j
    & (#i < #j)
"

lemma ExeGuestCanValidatePageAfterAssignment: exists-trace
"
    Ex SPA owner GID GPA #i #j. 
    RMPUpdate(SPA, owner, GUEST(GID, GPA, INVALID)) @ i
    & RMPUpdate(SPA, GUEST(GID, GPA, INVALID), GUEST(GID, GPA, VALID)) @ j
    & (#i < #j)
"

lemma ExePageCanBeReadAfterWrite: exists-trace
"
    Ex SPA owner1 owner2 content #i #j. 
    Write(SPA, owner1, content) @ i 
    & Read(SPA, owner2, content) @ j 
    & (#i < #j)
"

lemma ExeGuestCanWriteAfterValidation: exists-trace
"
    Ex SPA GID GPA content #i #j. 
    RMPUpdate(SPA, GUEST(GID, GPA, INVALID), GUEST(GID, GPA, VALID)) @ i 
    & Write(SPA, GUEST(GID, GPA, VALID), content) @ j 
    & (#i < #j)
"

lemma PageCannotBeTransferredToSameOwner:
"
    All SPA owner #i. 
    RMPUpdate(SPA, owner, owner) @ i 
    ==> (#i < #i)
"

lemma OnlyOwnerCanWriteToPage:
"
    All SPA owner content #i. 
    Write(SPA, owner, content) @ i 
    ==> Ex prevOwner #j. (RMPUpdate(SPA, prevOwner, owner) @ j 
        & (#j < #i)
        & not (Ex newOwner #k. RMPUpdate(SPA, owner, newOwner) @ k
            & (#j < #k) 
            & (#k < #i)))
"

lemma SPAMapsToUniqueGPA:
"
    All SPA owner1 owner2 GPA1 GPA2 GID val1 val2 #i #j. 
    ((RMPUpdate(SPA, owner1, GUEST(GID, GPA1, val1)) @ i 
    & RMPUpdate(SPA, owner2, GUEST(GID, GPA2, val2)) @ j 
    & #i < #j) 
    ==> GPA1 = GPA2 
        | (Ex newOwner #k. RMPUpdate(SPA, GUEST(GID, GPA1, val1), newOwner) @ k
            & (#i < #k) 
            & (#k < #j)))
"

end
