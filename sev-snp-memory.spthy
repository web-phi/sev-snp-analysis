theory SEV_SNP_MEMORY begin

restriction Unique:
  " All x #i #j.
    Uniq(x)@i & Uniq(x)@j ==> (#i = #j)
  "

rule InitializePage:
    [
        Fr(SPA)
    ]
    --[ 
        InitializePage(SPA)
    ]->
    [ 
        !SystemPA(SPA),
        PageState(SPA, 'HYPERVISOR'),
        PageContent('')
    ]

rule AssignToFW:
    [
        !SystemPA(SPA),
        PageState(SPA, 'HYPERVISOR')
    ]
    --[
        TransferOwnership(SPA, 'HYPERVISOR', 'FIRMWARE')
    ]->
    [
        PageState(SPA, 'FIRMWARE')
    ]

rule AssignToGVM:
    [
        !SystemPA(SPA),
        PageState(SPA, 'HYPERVISOR'),
        Fr(GPA),
        Fr(pageID)
    ]
    --[
        TransferOwnership(SPA, 'HYPERVISOR', 'GUEST'),
        RMPUpdate(SPA, GPA, pageID)
    ]->
    [
        !RMPEntry(SPA, GPA, pageID),
        PageState(SPA, 'GUEST')
    ]

rule ReturnFromGVM:
    [
        !SystemPA(SPA),
        PageState(SPA, 'GUEST')
    ]
    --[
        TransferOwnership(SPA, 'GUEST', 'HYPERVISOR'),
        Free(pageID)
    ]->
    [
        PageState(SPA, 'HYPERVISOR')
    ]

rule ReturnFromFW:
    [
        !SystemPA(SPA),
        PageState(SPA, 'FIRMWARE')
    ]
    --[
        TransferOwnership(SPA, 'FIRMWARE', 'HYPERVISOR')
    ]->
    [
        PageState(SPA, 'HYPERVISOR')
    ]

rule GuestValidate:
    [
        !SystemPA(SPA),
        !RMPEntry(SPA, GPA, pageID),
        PageState(SPA, 'GUEST')
    ]
    --[
        GuestValidate(GPA, SPA, pageID)
    ]->
    [
        PageState(SPA, 'GUEST'),
        Validated(SPA, GPA)
    ]

rule WriteToPage:
    [
        !SystemPA(SPA),
        PageState(SPA, owner)
    ]
    --[
        Write(SPA, owner, content)
    ]->
    [
        PageState(SPA, owner),
        PageContent(content)
    ]

rule ReadFromPage:
    [ 
        !SystemPA(SPA),
        PageState(SPA, owner),
        PageContent(content)
    ]
    --[
        Read(SPA, owner, content)
    ]->
    [
        PageState(SPA, owner),
        PageContent(content)
    ]

lemma ExePageCanGoFromFWToGVM: exists-trace
"
    Ex SPA, x, y, #i, #j. TransferOwnership(SPA, 'FIRMWARE', x) @ i & 
    TransferOwnership(SPA, y, 'GUEST') @ j & i < j
"

lemma ExePageCanBeGivenToSameGVMTwice: exists-trace
"
    Ex SPA, x, y, GPA1, GPA2, #i, #j. TransferOwnership(SPA, x, 'GUEST') @ i &
    TransferOwnership(SPA, y, 'GUEST') @ j & i < j
"

lemma ExeGuestCanValidatePageAfterAssignment: exists-trace
"
    Ex SPA, GPA, pageID, x, #i, #j. TransferOwnership(SPA, x, 'GUEST') @ i &
    GuestValidate(GPA, SPA, pageID) @ j & i < j
"

lemma ExePageCanBeReadAfterWrite: exists-trace
"
    Ex SPA, owner1, owner2, content, #i, #j. Write(SPA, owner1, content) @ i &
    Read(SPA, owner2, content) @ j & i < j
"

lemma ExeGuestCanWriteAfterValidation: exists-trace
"
    Ex SPA, GPA, pageID, content, #i, #j. GuestValidate(GPA, SPA, pageID) @ i &
    Write(SPA, 'GUEST', content) @ j & i < j
"

lemma OnlyOwnerCanWriteToPage:
"
    All SPA, owner, content, #i. (Write(SPA, owner, content) @ i ==>
    (Ex prevOwner, #j. (TransferOwnership(SPA, prevOwner, owner) @ j 
    & not (Ex newOwner, #k. TransferOwnership(owner, newOwner) @ k & j < k))))
"

lemma SPAMapsToUniqueGPA:
"
    All SPA, GPA1, GPA2, ptr1, ptr2, #i, #j. RMPUpdate(SPA, GPA1, ptr1) @ i & RMPUpdate(SPA, GPA2, ptr2) @ j ==>
    GPA1 = GPA2 | (Ex #k. Free(ptr1) @ k & i < k & k < j) | (Ex #l. Free(ptr2) @ l & j < l & l < i)
"