theory SEV_SNP_MEMORY begin

functions:
    HYPERVISOR/0,
    FIRMWARE/0,
    GUEST/3,
    VALID/0,
    INVALID/0

restriction PointerCanBeFreedOnlyOnce:
" 
    All ptr #i #j. (Free(ptr) @ i & Free(ptr) @ j ==> (#i = #j))
"

restriction FreedPointerCannotBeRead:
"
    All ptr SPA owner content #i #j. Read(ptr, SPA, owner, content) @ i & Free(ptr) @ j ==> (#i < #j)
"

restriction FreedPointerCannotBeWritten:
"
    All ptr SPA owner content #i #j. Write(ptr, SPA, owner, content) @ i & Free(ptr) @ j ==> (#i < #j)
"

restriction FreedPointerCannotBeUpdated:
"
    All ptr SPA owner #i #j. RMPUpdate(ptr, SPA, owner) @ i & Free(ptr) @ j ==> (#i < #j)
"

rule InitializePage:
    [
        Fr(SPA),
        Fr(ptr)
    ]
    --[ 
        InitializePage(SPA),
        RMPUpdate(ptr, SPA, HYPERVISOR())
    ]->
    [ 
        !SystemPA(SPA),
        !RMPEntry(ptr, SPA, HYPERVISOR()),
        PageContent(SPA, '0')
    ]

rule InitializeGuest:
    [ 
        Fr(GID)
    ]
    --[ 
        InitializeGuest(GID)
    ]->
    [ 
        !GuestID(GID)
    ]

rule AssignPageToFW:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, HYPERVISOR()),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, FIRMWARE()),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, FIRMWARE())
    ]

rule AssignPageToGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, HYPERVISOR()),
        !GuestID(GID),
        Fr(GPA),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, GUEST(GID, GPA, INVALID())),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, GUEST(GID, GPA, INVALID())),
    ]

rule ReturnPageFromGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, GUEST(GID, GPA, isValid)),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, HYPERVISOR()),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, HYPERVISOR())
    ]

rule ReturnPageFromFW:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, FIRMWARE()),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, HYPERVISOR()),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, HYPERVISOR())
    ]

rule GuestValidate:
    [
        !SystemPA(SPA),
        !GuestID(GID),
        !RMPEntry(ptr1, SPA, GUEST(GID, GPA, INVALID())),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, GUEST(GID, GPA, VALID())),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, GUEST(GID, GPA, VALID()))
    ]

rule WriteToPage:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr, SPA, owner),
        PageContent(SPA, oldContent),
        In(newContent)
    ]
    --[
        Write(ptr, SPA, owner, newContent)
    ]->
    [
        PageContent(SPA, newContent)
    ]

rule ReadFromPage:
    [ 
        !SystemPA(SPA),
        !RMPEntry(ptr, SPA, owner),
        PageContent(SPA, content)
    ]
    --[
        Read(ptr, SPA, owner, content)
    ]->
    [
        PageContent(SPA, content),
        Out(content)
    ]

lemma ExePageCanGoFromFWToGVM: exists-trace
"
    Ex ptr1 ptr2 SPA GID GPA val #i #j #k. 
    (RMPUpdate(ptr1, SPA, FIRMWARE()) @ i 
    & RMPUpdate(ptr2, SPA, GUEST(GID, GPA, val)) @ k 
    & Free(ptr1) @ j & not (Free(ptr2) @ k)
    & (#i < #j) & (#j < #k))
"

lemma ExePageCanBeGivenToSameGVMTwice: exists-trace
"
    Ex ptr1 ptr2 SPA GID GPA1 GPA2 val1 val2 #i #j #k. 
    (RMPUpdate(ptr1, SPA, GUEST(GID, GPA1, val1)) @ i
    & RMPUpdate(ptr2, SPA, GUEST(GID, GPA2, val2)) @ k 
    & Free(ptr1) @ j & not (Free(ptr2) @ k)
    & (#i < #j) & (#j < #k))
"

lemma ExeGuestCanValidatePageAfterAssignment: exists-trace
"
    Ex ptr1 ptr2 SPA GPA pageID x #i #j. 
    (RMPUpdate(ptr1, SPA, GUEST(GID, GPA, INVALID())) @ i
    & RMPUpdate(ptr2, SPA, GUEST(GID, GPA, VALID())) @ j 
    & Free(ptr1)
    & (#i < #j))
"

lemma ExePageCanBeReadAfterWrite: exists-trace
"
    Ex ptr1 ptr2 SPA owner1 owner2 content #i #j. Write(ptr1, SPA, owner1, content) @ i &
    Read(ptr2, SPA, owner2, content) @ j & #i < #j
"

lemma ExeGuestCanWriteAfterValidation: exists-trace
"
    Ex ptr1 ptr2 SPA GID GPA content #i #j. RMPUpdate(ptr1, SPA, GUEST(GID, GPA, VALID())) @ i &
    Write(ptr2, SPA, GUEST(GID, GPA, VALID()), content) @ j & #i < #j
"

lemma OnlyOwnerCanWriteToPage:
"
    All ptr1 SPA owner content #i. (Write(ptr1, SPA, owner, content) @ i ==>
    Ex ptr2 #j. (RMPUpdate(ptr2, SPA, owner) @ j & (#j < #i)
    & not ((Ex ptr2 newOwner #k. (RMPUpdate(ptr2, SPA, newOwner) @ k & (#j < #k) & (#k < #i))))))
"

lemma SPAMapsToUniqueGPA:
"
    All SPA GPA1 GPA2 GID val1 val2 ptr1 ptr2 #i #j. 
    ((RMPUpdate(ptr1, SPA, GUEST(GID, GPA1, val1)) @ i 
    & RMPUpdate(ptr2, SPA, GUEST(GID, GPA2, val2)) @ j 
    & #i < #j) ==>
    GPA1 = GPA2 
    | (Ex #k. Free(ptr1) @ k & #i < #k & #k < #j))
"

end