theory SEV_SNP_MEMORY begin

builtins: symmetric-encryption

restriction PointerCanBeDroppedOnlyOnce:
"
    All row #i #j.
    Drop(row) @ i
    & Drop(row) @ j ==>
        #i = #j
"

restriction DroppedPointerCannotBeAccessed:
"
    All row #i #j.
    AccessMemoryPointer(row) @ i
    & Drop(row) @ j ==>
        #i < #j
"

restriction DroppedPointerCannotBeUpdated:
"
    All row SPA owner ASID GPA isValid #i #j.
    RMPUpdate(row, SPA, owner, ASID, GPA, isValid) @ i
    & Drop(row) @ j ==>
        #i < #j
"

restriction ProcessorStateCanBeInitializedOnlyOnce:
"
    All #i #j.
    InitializeProcessorState() @ i
    & InitializeProcessorState() @ j ==>
        #i = #j
"

rule InitializePage:
    [
        Fr(SPA),
        Fr(row),
        In(initialData)
    ]
    --[
        InitializePage(SPA),
        RMPUpdate(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        AccessMemoryPointer(row),
        Write(SPA, 'HYPERVISOR', 'NULL ASID', initialData)
    ]->
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA, initialData)
    ]

rule InitializeGuest:
    [
        Fr(ASID)
    ]
    --[
        InitializeGuest(ASID)
    ]->
    [
        !GuestID(ASID)
    ]

rule InitializeProcessorState:
    [
        !FirmwareLtk(ltkFW)
    ]
    --[
        InitializeProcessorState()
    ]->
    [
        ProcessorState(senc('NULL DATA', ltkFW))
    ]

rule GenerateFirmwareLtk:
    [
        Fr(ltk)
    ]
    --[
        GenerateFirmwareLtk(ltk)
    ]->
    [
        !FirmwareLtk(ltk)
    ]

rule GenerateGuestLtk:
    [
        Fr(ltk),
        !GuestID(ASID)
    ]
    --[
        GenerateGuestLtk(ltk, ASID)
    ]->
    [
        !GuestLtk(ltk, ASID)
    ]

rule CompromiseFirmwareLtk:
    [
        !FirmwareLtk(ltk)
    ]
    --[
        CompromiseFirmwareLtk(ltk)
    ]->
    [
        Out(ltk)
    ]

rule CompromiseGuestLtk:
    [
        !GuestLtk(ltk, ASID)
    ]
    --[
        CompromiseGuestLtk(ltk, ASID)
    ]->
    [
        Out(ltk)
    ]

rule CompromiseReadAccess:
    [
        !SystemPA(SPA),
        PageContent(SPA, content)
    ]
    --[
        CompromiseReadAccess(SPA, content)
    ]->
    [
        PageContent(SPA, content),
        Out(content)
    ]

rule CompromiseWriteAccess:
    [
        !SystemPA(SPA),
        PageContent(SPA, oldContent),
        In(newContent)
    ]
    --[
        CompromiseWriteAccess(SPA, newContent)
    ]->
    [
        PageContent(SPA, newContent)
    ]

rule AssignPageToFW:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]

rule AssignPageToGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !GuestID(ASID),
        Fr(GPA),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'INVALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'GUEST', ASID, GPA, 'INVALID')
    ]

rule ReturnPageFromGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, isValid),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]

rule ReturnPageFromFW:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]

rule GuestValidate:
    [
        !SystemPA(SPA),
        !GuestID(ASID),
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, 'INVALID'),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'GUEST', ASID, GPA, 'VALID')
    ]

rule ReadFromGuestPage:
    let
        data = sdec(dataEncrypted, <ltk, SPA>)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'GUEST', ASID, GPA, 'VALID'),
        !GuestLtk(ltk, ASID),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, dataEncrypted),
        ProcessorState(oldDataEncrypted)
    ]
    --[
        Read(SPA, 'GUEST', ASID, dataEncrypted),
        AccessMemoryPointer(row)
    ]->
    [
        PageContent(SPA, dataEncrypted),
        ProcessorState(senc(data, ltkFW))
    ]

rule WriteToGuestPage:
    let
        data = sdec(dataEncrypted, ltkFW)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'GUEST', ASID, GPA, 'VALID'),
        !GuestLtk(ltk, ASID),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, oldContentEncrypted),
        ProcessorState(dataEncrypted)
    ]
    --[
        Write(SPA, 'GUEST', ASID, senc(data, <ltk, SPA>)),
        AccessMemoryPointer(row)
    ]->
    [
        PageContent(SPA, senc(data, <ltk, SPA>)),
        ProcessorState(dataEncrypted)
    ]

rule ReadFromHypervisorPage:
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, data),
        ProcessorState(oldDataEncrypted)
    ]
    --[
        Read(SPA, 'HYPERVISOR', 'NULL ASID', data),
        AccessMemoryPointer(row)
    ]->
    [
        PageContent(SPA, data),
        ProcessorState(senc(data, ltkFW))
    ]

rule WriteToHypervisorPage:
    let
        data = sdec(dataEncrypted, ltkFW)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, oldContent),
        ProcessorState(dataEncrypted)
    ]
    --[
        Write(SPA, 'HYPERVISOR', 'NULL ASID', data),
        AccessMemoryPointer(row)
    ]->
    [
        PageContent(SPA, data),
        ProcessorState(dataEncrypted)
    ]

rule ReadFromFirmwarePage:
    let
        data = sdec(dataEncrypted, <ltkFW, SPA>)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, dataEncrypted),
        ProcessorState(oldDataEncrypted)
    ]
    --[
        Read(SPA, 'FIRMWARE', 'NULL ASID', dataEncrypted),
        AccessMemoryPointer(row)
    ]->
    [
        PageContent(SPA, dataEncrypted),
        ProcessorState(senc(data, ltkFW))
    ]

rule WriteToFirmwarePage:
    let
        data = sdec(dataEncrypted, ltkFW)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, oldContentEncrypted),
        ProcessorState(dataEncrypted)
    ]
    --[
        Write(SPA, 'FIRMWARE', 'NULL ASID', senc(data, <ltkFW, SPA>)),
        AccessMemoryPointer(row)
    ]->
    [
        PageContent(SPA, senc(data, <ltkFW, SPA>)),
        ProcessorState(dataEncrypted)
    ]

lemma Types[sources]:
"
    (All SPA owner ASID content #i.
    Read(SPA, owner, ASID, content) @ i ==>
        ((Ex #j. KU(content) @ j
            & #j < #i)
        | (Ex prevOwner prevASID #j. Write(SPA, prevOwner, prevASID, content) @ j
            & #j < #i)
        | (Ex #j. CompromiseWriteAccess(SPA, content) @ j
            & #j < #i)))
    &
    (All SPA content #i.
    CompromiseReadAccess(SPA, content) @ i ==>
        ((Ex #j. KU(content) @ j
            & #j < #i)
        | (Ex prevOwner prevASID #j. Write(SPA, prevOwner, prevASID, content) @ j
            & #j < #i)
        | (Ex #j. CompromiseWriteAccess(SPA, content) @ j
            & #j < #i)))
"

lemma ExePageCanGoFromFWToGVM: exists-trace
"
    Ex row1 row2 SPA ASID GPA isValid #i #j #k.
    RMPUpdate(row1, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID') @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, isValid) @ k
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & (#j < #k)
"

lemma ExePageCanBeGivenToSameGVMTwice: exists-trace
"
    Ex row1 row2 SPA ASID GPA1 GPA2 isValid1 isValid2 #i #j #k.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA1, isValid1) @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA2, isValid2) @ k
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & #j < #k
"

lemma ExePageCanGoFromGVMToFW: exists-trace
"
    Ex row1 row2 SPA ASID GPA isValid #i #j #k.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA, isValid) @ i
    & RMPUpdate(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID') @ k
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & #j < #k
"

lemma ExeGuestCanValidatePageAfterAssignment: exists-trace
"
    Ex row1 row2 SPA ASID GPA #i #j #k.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA, 'INVALID') @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'VALID') @ k
    & Drop(row1) @ j
    & #i < #j
    & (#j = #k | #j < #k)
"

lemma ExeGuestCanWriteAfterValidation: exists-trace
"
    Ex row SPA ASID GPA content #i #j.
    RMPUpdate(row, SPA, 'GUEST', ASID, GPA, 'VALID') @ i
    & Write(SPA, 'GUEST', ASID, content) @ j
    & #i < #j
"

lemma ExeGuestCanReadAfterWriting: exists-trace
"
    Ex row SPA ASID GPA data #i #j #k.
    RMPUpdate(row, SPA, 'GUEST', ASID, GPA, 'VALID') @ i
    & Write(SPA, 'GUEST', ASID, data) @ j
    & Read(SPA, 'GUEST', ASID, data) @ k
    & #i < #j
    & #j < #k
"

lemma ExeHypervisorCanReadAfterWriting: exists-trace
"
    Ex row SPA data #i #j #k.
    RMPUpdate(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'VALID') @ i
    & Write(SPA, 'HYPERVISOR', 'NULL ASID', data) @ j
    & Read(SPA, 'HYPERVISOR', 'NULL ASID', data) @ k
    & #i < #j
    & #j < #k
"

lemma ExeFirmwareCanReadAfterWriting: exists-trace
"
    Ex row SPA data #i #j #k.
    RMPUpdate(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'VALID') @ i
    & Write(SPA, 'FIRMWARE', 'NULL ASID', data) @ j
    & Read(SPA, 'FIRMWARE', 'NULL ASID', data) @ k
    & #i < #j
    & #j < #k
"

lemma OnlyOwnerCanWriteToPage:
"
    All SPA owner ASID content #i.
    Write(SPA, owner, ASID, content) @ i ==>
        Ex row GPA isValid #j.
            (RMPUpdate(row, SPA, owner, ASID, GPA, isValid) @ j
            & (#j < #i)
            & not (Ex #k.
                Drop(row) @ k
                & (#j < #k)
                & (#k < #i)))
"

lemma SPAMapsToUniqueGPA:
"
    All SPA GPA1 GPA2 ASID val1 val2 row1 row2 #i #j.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA1, val1) @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA2, val2) @ j
    & #i < #j ==>
        GPA1 = GPA2
        | (Ex #k.
            Drop(row1) @ k
            & #i < #k
            & #k < #j)
"

end
