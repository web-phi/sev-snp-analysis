theory SEV_SNP_MEMORY begin

builtins: symmetric-encryption

functions:
    comp/2

restriction PointerCanBeDroppedOnlyOnce:
" 
    All row #i #j. 
    Drop(row) @ i 
    & Drop(row) @ j ==> 
        #i = #j
"

restriction DroppedPointerCannotBeAccessed:
"
    All row SPA #i #j. 
    AccessMemoryPointer(row, SPA) @ i 
    & Drop(row) @ j ==> 
        #i < #j
"

restriction DroppedPointerCannotBeUpdated:
"
    All row SPA owner ASID GPA isValid #i #j. 
    RMPUpdate(row, SPA, owner, ASID, GPA, isValid) @ i 
    & Drop(row) @ j ==> 
        #i < #j
"

restriction InstructionRegisterCanBeInitializedOnlyOnce:
"
    All #i #j.
    InitializeInstructionRegister() @ i
    & InitializeInstructionRegister() @ j ==>
        #i = #j
"

restriction DataRegisterCanBeInitializedOnlyOnce:
"
    All #i #j.
    InitializeDataRegister() @ i
    & InitializeDataRegister() @ j ==>
        #i = #j
"

rule InitializePage:
    [
        Fr(SPA),
        Fr(row),
        In(initialData)
    ]
    --[ 
        InitializePage(SPA),
        RMPUpdate(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]->
    [ 
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA, initialData)
    ]

rule InitializeGuest:
    [ 
        Fr(ASID)
    ]
    --[ 
        InitializeGuest(ASID)
    ]->
    [ 
        !GuestID(ASID)
    ]

rule InitializeInstructionRegister:
    [
        !FirmwareLtk(ltkFW)
    ]
    --[
        InitializeInstructionRegister()
    ]->
    [
        InstructionRegister(senc(ltkFW, 'NOP'))
    ]

rule InitializeDataRegister:
    [
        !FirmwareLtk(ltkFW)
    ]
    --[
        InitializeDataRegister()
    ]->
    [
        DataRegister(senc(ltkFW, 'NULL DATA'))
    ]

rule GenerateFirmwareLtk:
    [
        Fr(ltk)
    ]
    --[
        GenerateFirmwareLtk(ltk)
    ]->
    [
        !FirmwareLtk(ltk)
    ]

rule GenerateGuestLtk:
    [
        Fr(ltk),
        !GuestID(ASID)
    ]
    --[
        GenerateGuestLtk(ltk, ASID)
    ]->
    [
        !GuestLtk(ltk, ASID)
    ]

rule CompromiseFirmwareLtk:
    [ 
        !FirmwareLtk(ltk)
    ]
    --[ 
        CompromiseFirmwareLtk(ltk)
    ]->
    [ 
        Out(ltk)
    ]

rule CompromiseGuestLtk:
    [ 
        !GuestLtk(ltk, ASID)
    ]
    --[ 
        CompromiseGuestLtk(ltk, ASID)
    ]->
    [ 
        Out(ltk)
    ]

rule AssignPageToFW:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        In(newContent),
        PageContent(SPA, oldContent),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA, newContent)
    ]

rule AssignPageToGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !GuestID(ASID),
        In(newContent),
        PageContent(SPA, oldContent),
        Fr(GPA),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'INVALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'GUEST', ASID, GPA, 'INVALID'),
        PageContent(SPA, newContent)
    ]

rule ReturnPageFromGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, isValid),
        PageContent(SPA, content),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA, content),
        Out(content)
    ]

rule ReturnPageFromFW:
    [
        !SystemPA(SPA),
        !RMPEntry(row1, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA, content),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA, content),
        Out(content)
    ]

rule GuestValidate:
    [
        !SystemPA(SPA),
        !GuestID(ASID),
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, 'INVALID'),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'GUEST', ASID, GPA, 'VALID')
    ]

rule ClearInstructionRegister:
    let
        oldInstruction = sdec(ltkFW, oldInstructionEncrypted)
    in
    [
        !FirmwareLtk(ltkFW),
        InstructionRegister(oldInstructionEncrypted)
    ]
    --[
        ClearInstructionRegister(oldInstruction)
    ]->
    [
        InstructionRegister(senc(ltkFW, 'NOP'))
    ]

rule ClearDataRegister:
    let
        oldData = sdec(ltkFW, oldDataEncrypted)
    in
    [
        !FirmwareLtk(ltkFW),
        DataRegister(oldDataEncrypted)
    ]
    --[
        ClearDataRegister(oldData)
    ]->
    [
        DataRegister(senc(ltkFW, 'NULL DATA'))
    ]

rule LoadInstructionFromGuestPage:
    let
        instruction = sdec(<ltk, SPA>, instructionEncrypted)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'GUEST', ASID, GPA, 'VALID'),
        !GuestLtk(ltk, ASID),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, instructionEncrypted),
        InstructionRegister(senc(ltkFW, 'NOP'))
    ]
    --[
        LoadInstruction(SPA, 'GUEST', ASID, instruction),
        AccessMemoryPointer(row, SPA)
    ]->
    [
        PageContent(SPA, senc(<ltk, SPA>, instruction)),
        InstructionRegister(senc(ltkFW, instruction))
    ]

rule LoadDataFromGuestPage:
    let
        data = sdec(<ltk, SPA>, dataEncrypted)
        oldData = sdec(ltkFW, oldDataEncrypted)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'GUEST', ASID, GPA, 'VALID'),
        !GuestLtk(ltk, ASID),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, dataEncrypted),
        DataRegister(oldDataEncrypted)
    ]
    --[
        LoadData(SPA, 'GUEST', ASID, data),
        AccessMemoryPointer(row, SPA)
    ]->
    [
        PageContent(SPA, senc(<ltk, SPA>, data)),
        DataRegister(senc(ltkFW, <oldData, data>))
    ]

rule WriteToGuestPage:
    let
        oldContent = sdec(<ltk, SPA>, oldContentEncrypted)
        instruction = sdec(ltkFW, instructionEncrypted)
        data = sdec(ltkFW, dataEncrypted)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'GUEST', ASID, GPA, 'VALID'),
        !GuestLtk(ltk, ASID),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, oldContentEncrypted),
        InstructionRegister(instructionEncrypted),
        DataRegister(dataEncrypted)
    ]
    --[
        Write(SPA, 'GUEST', ASID, comp(instruction, data)),
        AccessMemoryPointer(row, SPA),
        ClearInstructionRegister(instruction),
        ClearDataRegister(data)
    ]->
    [
        PageContent(SPA, senc(<ltk, SPA>, comp(instruction, data))),
        InstructionRegister(senc(ltkFW, 'NOP')),
        DataRegister(senc(ltkFW, 'NULL DATA'))
    ]

rule LoadInstructionFromHypervisorPage:
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, instruction),
        InstructionRegister(senc(ltkFW, 'NOP'))
    ]
    --[
        LoadInstruction(SPA, 'HYPERVISOR', 'NULL ASID', instruction),
        AccessMemoryPointer(row, SPA)
    ]->
    [
        PageContent(SPA, instruction),
        InstructionRegister(senc(ltkFW, 'NOP'))
    ]

rule LoadDataFromHypervisorPage:
    let
        oldData = sdec(ltkFW, oldDataEncrypted)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, data),
        DataRegister(oldDataEncrypted)
    ]
    --[
        LoadData(SPA, 'HYPERVISOR', 'NULL ASID', data),
        AccessMemoryPointer(row, SPA)
    ]->
    [
        PageContent(SPA, data),
        InstructionRegister(senc(ltkFW, <oldData, data>))
    ]
    
rule WriteToHypervisorPage:
    let
        instruction = sdec(ltkFW, instructionEncrypted)
        data = sdec(ltkFW, dataEncrypted)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, oldContent),
        InstructionRegister(instructionEncrypted),
        DataRegister(dataEncrypted)
    ]
    --[
        Write(SPA, 'HYPERVISOR', 'NULL ASID', comp(instruction, data)),
        AccessMemoryPointer(row, SPA),
        ClearInstructionRegister(instruction),
        ClearDataRegister(data)
    ]->
    [
        PageContent(SPA, comp(instruction, data)),
        InstructionRegister(senc(ltkFW, 'NOP')),
        DataRegister(senc(ltkFW, 'NULL DATA'))
    ]

rule LoadInstructionFromFirmwarePage:
    let
        instruction = sdec(<ltkFW, SPA>, instructionEncrypted)
    in
    [ 
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, instructionEncrypted),
        InstructionRegister(senc(ltkFW, 'NOP'))
    ]
    --[
        LoadInstruction(SPA, 'FIRMWARE', 'NULL ASID', instruction),
        AccessMemoryPointer(row, SPA)
    ]->
    [
        PageContent(SPA, senc(<ltkFW, SPA>, instruction)),
        InstructionRegister(senc(ltkFW, instruction))
    ]

rule LoadDataFromFirmwarePage:
    let
        data = sdec(<ltkFW, SPA>, dataEncrypted)
        oldData = sdec(ltkFW, oldDataEncrypted)
    in
    [ 
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, dataEncrypted),
        DataRegister(oldDataEncrypted)
    ]
    --[
        LoadData(SPA, 'FIRMWARE', 'NULL ASID', data),
        AccessMemoryPointer(row, SPA)
    ]->
    [
        PageContent(SPA, senc(<ltkFW, SPA>, data)),
        DataRegister(senc(ltkFW, <oldData, data>))
    ]

rule WriteToFirmwarePage:
    let
        oldContent = sdec(<ltk, SPA>, oldContentEncrypted)
        instruction = sdec(ltkFW, instructionEncrypted)
        data = sdec(ltkFW, dataEncrypted)
    in
    [
        !SystemPA(SPA),
        !RMPEntry(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !FirmwareLtk(ltkFW),
        PageContent(SPA, oldContentEncrypted),
        InstructionRegister(instructionEncrypted),
        DataRegister(dataEncrypted)
    ]
    --[
        Write(SPA, 'FIRMWARE', 'NULL ASID', comp(instruction, data)),
        AccessMemoryPointer(row, SPA),
        ClearInstructionRegister(instruction),
        ClearDataRegister(data)
    ]->
    [
        PageContent(SPA, senc(<ltkFW, SPA>, comp(instruction, data))),
        InstructionRegister(senc(ltkFW, 'NOP')),
        DataRegister(senc(ltkFW, 'NULL DATA'))
    ]


lemma ExePageCanGoFromFWToGVM: exists-trace
"
    Ex row1 row2 SPA ASID GPA isValid #i #j #k. 
    RMPUpdate(row1, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID') @ i 
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, isValid) @ k 
    & Drop(row1) @ j
    & (#i = #j | #i < #j) 
    & (#j < #k)
"

lemma ExePageCanBeGivenToSameGVMTwice: exists-trace
"
    Ex row1 row2 SPA ASID GPA1 GPA2 isValid1 isValid2 #i #j #k. 
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA1, isValid1) @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA2, isValid2) @ k 
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & #j < #k
"

lemma ExePageCanGoFromGVMToFW: exists-trace
"
    Ex row1 row2 SPA ASID GPA isValid #i #j #k. 
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA, isValid) @ i 
    & RMPUpdate(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID') @ k 
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & #j < #k
"

lemma ExeGuestCanValidatePageAfterAssignment: exists-trace
"
    Ex row1 row2 SPA ASID GPA #i #j #k. 
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA, 'INVALID') @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'VALID') @ k 
    & Drop(row1) @ j
    & #i < #j 
    & (#j = #k | #j < #k)
"

lemma ExeGuestCanWriteAfterValidation: exists-trace
"
    Ex row SPA ASID GPA instruction data #i #j. 
    RMPUpdate(row, SPA, 'GUEST', ASID, GPA, 'VALID') @ i 
    & Write(SPA, 'GUEST', ASID, comp(instruction, data)) @ j 
    & #i < #j
"

lemma ExeGuestCanLoadDataAfterWriting: exists-trace
"
    Ex row SPA ASID GPA data #i #j #k.
    RMPUpdate(row, SPA, 'GUEST', ASID, GPA, 'VALID') @ i 
    & Write(SPA, 'GUEST', ASID, data) @ j
    & LoadData(SPA, 'GUEST', ASID, data) @ k
    & #i < #j
    & #j < #k
"

lemma ExeHypervisorCanLoadDataAfterWriting: exists-trace
"
    Ex row SPA data #i #j #k.
    RMPUpdate(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'VALID') @ i 
    & Write(SPA, 'HYPERVISOR', 'NULL ASID', data) @ j
    & LoadData(SPA, 'HYPERVISOR', 'NULL ASID', data) @ k
    & #i < #j
    & #j < #k
"

lemma ExeFirmwareCanLoadDataAfterWriting: exists-trace
"
    Ex row SPA data #i #j #k.
    RMPUpdate(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'VALID') @ i 
    & Write(SPA, 'FIRMWARE', 'NULL ASID', data) @ j
    & LoadData(SPA, 'FIRMWARE', 'NULL ASID', data) @ k
    & #i < #j
    & #j < #k
"

lemma OnlyOwnerCanWriteToPage:
"
    All SPA owner ASID instruction data #i. 
    Write(SPA, owner, ASID, comp(instruction, data)) @ i ==>
        Ex row GPA isValid #j. 
            (RMPUpdate(row, SPA, owner, ASID, GPA, isValid) @ j 
            & (#j < #i)
            & not (Ex #k. 
                Drop(row) @ k 
                & (#j < #k) 
                & (#k < #i)))
"

lemma SPAMapsToUniqueGPA:
"
    All SPA GPA1 GPA2 ASID val1 val2 row1 row2 #i #j. 
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA1, val1) @ i 
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA2, val2) @ j 
    & #i < #j ==>
        GPA1 = GPA2 
        | (Ex #k. 
            Drop(row1) @ k 
            & #i < #k 
            & #k < #j)
"

end
