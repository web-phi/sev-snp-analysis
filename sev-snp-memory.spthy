theory SEV_SNP_MEMORY begin

builtins: symmetric-encryption

restriction PointerCanBeDroppedOnlyOnce:
"
    All row #i #j.
    Drop(row) @ i
    & Drop(row) @ j ==>
        #i = #j
"

restriction DroppedPointerCannotBeAccessed:
"
    All row #i #j.
    AccessPointer(row) @ i
    & Drop(row) @ j ==>
        #i < #j
"

restriction DroppedPointerCannotBeUpdated:
"
    All row SPA owner ASID GPA isValid #i #j.
    RMPUpdate(row, SPA, owner, ASID, GPA, isValid) @ i
    & Drop(row) @ j ==>
        #i < #j
"

restriction InitializationCanHappenOnlyOnce:
"
    All id #i #j.
    Initialize(id) @ i
    & Initialize(id) @ j ==>
        #i = #j
"

rule InitializeThread:
    [
        Fr(TID),
        Fr(row)
    ]
    --[
        ContextSwitch(row, TID, 'NULL ASID'),
        Initialize(TID)
    ]->
    [
        !RunningState(row, TID, 'NULL ASID'),
        ProcessorState(TID, 'NULL DATA')
    ]

rule InitializePage:
    [
        Fr(SPA),
        Fr(row)
    ]
    --[
        RMPUpdate(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        AccessPointer(row),
        Write(SPA, 'HYPERVISOR', 'NULL ASID', 'NULL DATA'),
        Initialize(SPA)
    ]->
    [
        !RMPEntry(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA, 'NULL DATA')
    ]

rule InitializeGuest:
    [
        Fr(ASID),
        In(GuestImage),
        !RMPEntry(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]
    --[
        AccessPointer(row),
        Write(SPA, 'FIRMWARE', 'NULL ASID', <ASID, GuestImage>),
        Initialize(ASID)
    ]->
    [
        !GuestID(ASID)
    ]

rule GenerateFirmwareLtk:
    [
        Fr(ltk)
    ]
    --[
        GenerateFirmwareLtk(ltk)
    ]->
    [
        !FirmwareLtk(ltk)
    ]

rule GenerateGuestLtk:
    [
        Fr(ltk),
        !GuestID(ASID)
    ]
    --[
        GenerateGuestLtk(ltk, ASID)
    ]->
    [
        !GuestLtk(ltk, ASID)
    ]

rule CompromiseFirmwareLtk:
    [
        !FirmwareLtk(ltk)
    ]
    --[
        CompromiseFirmwareLtk(ltk)
    ]->
    [
        Out(ltk)
    ]

rule CompromiseGuestLtk:
    [
        !GuestLtk(ltk, ASID)
    ]
    --[
        CompromiseGuestLtk(ltk, ASID)
    ]->
    [
        Out(ltk)
    ]

rule SwitchThreadToGuest:
    let
        ASID = fst(sdec(GuestContextEncrypted, ltk))
        GuestContext = snd(sdec(GuestContextEncrypted, ltk))
    in
    [
        Fr(row1),
        !GuestID(ASID),
        !RunningState(row2, TID, 'NULL ASID'),
        ProcessorState(TID, HypervisorState),
        !FirmwareLtk(ltk),
        !RMPEntry(row3, SPA1, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !RMPEntry(row4, SPA2, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA1, oldHypervisorContextEncrypted),
        PageContent(SPA2, GuestContextEncrypted)
    ]
    --[
        ContextSwitch(row1, TID, ASID),
        AccessPointer(row3),
        AccessPointer(row4),
        Write(SPA1, 'FIRMWARE', 'NULL ASID', senc(<'NULL ASID', HypervisorState>, ltk)),
        Read(SPA2, 'FIRMWARE', 'NULL ASID', GuestContextEncrypted),
        Drop(row2)
    ]->
    [
        !RunningState(row1, TID, ASID),
        ProcessorState(TID, GuestContext),
        PageContent(SPA1, senc(<'NULL ASID', HypervisorState>, ltk)),
        PageContent(SPA2, GuestContextEncrypted),
        Out(senc(<'NULL ASID', HypervisorState>, ltk))
    ]

rule SwitchThreadToHypervisor:
    let
        ASID = fst(sdec(oldGuestContextEncrypted, ltk))
        HypervisorContext = snd(sdec(HypervisorContextEncrypted, ltk))
    in
    [
        Fr(row1),
        !GuestID(ASID),
        !RunningState(row2, TID, ASID),
        ProcessorState(TID, GuestState),
        !FirmwareLtk(ltk),
        !RMPEntry(row3, SPA1, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !RMPEntry(row4, SPA2, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        PageContent(SPA1, oldGuestContextEncrypted),
        PageContent(SPA2, HypervisorContextEncrypted)
    ]
    --[
        ContextSwitch(row1, TID, ASID),
        AccessPointer(row3),
        AccessPointer(row4),
        Write(SPA1, 'FIRMWARE', 'NULL ASID', senc(<'NULL ASID', GuestState>, ltk)),
        Read(SPA2, 'FIRMWARE', 'NULL ASID', HypervisorContextEncrypted),
        Drop(row2)
    ]->
    [
        !RunningState(row1, TID, 'NULL ASID'),
        ProcessorState(TID, HypervisorContext),
        PageContent(SPA1, senc(<ASID, GuestState>, ltk)),
        PageContent(SPA2, HypervisorContextEncrypted),
        Out(senc(<ASID, GuestState>, ltk))
    ]

rule AssignPageToFW:
    [
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]

rule AssignPageToGVM:
    [
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !GuestID(ASID),
        Fr(GPA),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'INVALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'GUEST', ASID, GPA, 'INVALID')
    ]

rule ReturnPageFromGVM:
    [
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, isValid),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]

rule ReturnPageFromFW:
    [
        !RMPEntry(row1, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Fr(row2)
    ]
    --[
        RMPUpdate(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        Drop(row1)
    ]->
    [
        !RMPEntry(row2, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID')
    ]

rule GuestValidate:
    [
        !GuestID(ASID),
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, 'INVALID'),
        !RunningState(row2, TID, ASID),
        Fr(row3)
    ]
    --[
        RMPUpdate(row3, SPA, 'GUEST', ASID, GPA, 'VALID'),
        AccessPointer(row2),
        Drop(row1)
    ]->
    [
        !RMPEntry(row3, SPA, 'GUEST', ASID, GPA, 'VALID')
    ]

rule ReadFromGuestPage:
    let
        data = sdec(dataEncrypted, <ltk, SPA>)
    in
    [
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, 'VALID'),
        !GuestLtk(ltk, ASID),
        !RunningState(row2, TID, ASID),
        PageContent(SPA, dataEncrypted),
        ProcessorState(TID, oldData)
    ]
    --[
        Read(SPA, 'GUEST', ASID, dataEncrypted),
        AccessPointer(row1),
        AccessPointer(row2)
    ]->
    [
        PageContent(SPA, dataEncrypted),
        ProcessorState(TID, data)
    ]

rule WriteToGuestPage:
    let
        oldContent = sdec(oldContentEncrypted, <ltk, SPA>)
    in
    [
        !RMPEntry(row1, SPA, 'GUEST', ASID, GPA, 'VALID'),
        !GuestLtk(ltk, ASID),
        !RunningState(row2, TID, ASID),
        PageContent(SPA, oldContentEncrypted),
        ProcessorState(TID, data)
    ]
    --[
        Write(SPA, 'GUEST', ASID, senc(data, <ltk, SPA>)),
        AccessPointer(row1),
        AccessPointer(row2)
    ]->
    [
        PageContent(SPA, senc(data, <ltk, SPA>)),
        ProcessorState(TID, data),
        Out(senc(data, <ltk, SPA>))
    ]

rule ReadFromHypervisorPage:
    [
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !RunningState(row2, TID, 'NULL ASID'),
        PageContent(SPA, data),
        ProcessorState(TID, oldData)
    ]
    --[
        Read(SPA, 'HYPERVISOR', 'NULL ASID', data),
        AccessPointer(row1),
        AccessPointer(row2)
    ]->
    [
        PageContent(SPA, data),
        ProcessorState(TID, data)
    ]

rule WriteToHypervisorPage:
    [
        !RMPEntry(row1, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'NULL VALID'),
        !RunningState(row2, TID, 'NULL ASID'),
        PageContent(SPA, oldContent),
        ProcessorState(TID, data)
    ]
    --[
        Write(SPA, 'HYPERVISOR', 'NULL ASID', data),
        AccessPointer(row1),
        AccessPointer(row2)
    ]->
    [
        PageContent(SPA, data),
        ProcessorState(TID, data)
    ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

lemma ExeThreadCanSpawn: exists-trace
"
    Ex row TID #i.
    ContextSwitch(row, TID, 'NULL ASID') @ i
"

lemma ExeGVMCanRunOnThread: exists-trace
"
    Ex row TID ASID #i.
    ContextSwitch(row, TID, ASID) @ i
    & not (ASID = 'NULL ASID')
"

lemma ExeThreadCanGoFromHVToGVM: exists-trace
"
    Ex row1 row2 TID ASID #i #j #k.
    ContextSwitch(row1, TID, 'NULL ASID') @ i
    & ContextSwitch(row2, TID, ASID) @ k
    & Drop(row1) @ j
    & (#i < #j)
    & (#j < #k | #j = #k)
"

lemma ExeThreadCanGoFromGVMToHV: exists-trace
"
    Ex row1 row2 TID ASID #i #j #k.
    ContextSwitch(row1, TID, ASID) @ i
    & ContextSwitch(row2, TID, 'NULL ASID') @ k
    & Drop(row1) @ j
    & (#i < #j)
    & (#j < #k | #j = #k)
"

lemma ExeThreadCanGoFromGVMToOtherGVM: exists-trace
"
    Ex row1 row2 TID ASID1 ASID2 #i #j #k.
    ContextSwitch(row1, TID, ASID1) @ i
    & ContextSwitch(row2, TID, ASID2) @ k
    & Drop(row1) @ j
    & not (ASID1 = ASID2)
    & (#i < #j)
    & (#j < #k | #j = #k)
"

lemma ExePageCanGoFromFWToGVM: exists-trace
"
    Ex row1 row2 SPA ASID GPA isValid #i #j #k.
    RMPUpdate(row1, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID') @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, isValid) @ k
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & (#j < #k)
"

lemma ExePageCanBeGivenToSameGVMTwice: exists-trace
"
    Ex row1 row2 SPA ASID GPA1 GPA2 isValid1 isValid2 #i #j #k.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA1, isValid1) @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA2, isValid2) @ k
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & #j < #k
"

lemma ExePageCanGoFromGVMToFW: exists-trace
"
    Ex row1 row2 SPA ASID GPA isValid #i #j #k.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA, isValid) @ i
    & RMPUpdate(row2, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'NULL VALID') @ k
    & Drop(row1) @ j
    & (#i = #j | #i < #j)
    & #j < #k
"

lemma ExeGuestCanValidatePageAfterAssignment: exists-trace
"
    Ex row1 row2 SPA ASID GPA #i #j #k.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA, 'INVALID') @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA, 'VALID') @ k
    & Drop(row1) @ j
    & #i < #j
    & (#j = #k | #j < #k)
"

lemma ExeGuestCanWriteAfterValidation: exists-trace
"
    Ex row SPA ASID GPA data #i #j.
    RMPUpdate(row, SPA, 'GUEST', ASID, GPA, 'VALID') @ i
    & Write(SPA, 'GUEST', ASID, data) @ j
    & #i < #j
"

lemma ExeGuestCanReadAfterWriting: exists-trace
"
    Ex row SPA ASID GPA data #i #j #k.
    RMPUpdate(row, SPA, 'GUEST', ASID, GPA, 'VALID') @ i
    & Write(SPA, 'GUEST', ASID, data) @ j
    & Read(SPA, 'GUEST', ASID, data) @ k
    & #i < #j
    & #j < #k
"

lemma ExeHypervisorCanReadAfterWriting: exists-trace
"
    Ex row SPA data #i #j #k.
    RMPUpdate(row, SPA, 'HYPERVISOR', 'NULL ASID', 'NULL GPA', 'VALID') @ i
    & Write(SPA, 'HYPERVISOR', 'NULL ASID', data) @ j
    & Read(SPA, 'HYPERVISOR', 'NULL ASID', data) @ k
    & #i < #j
    & #j < #k
"

lemma ExeFirmwareCanReadAfterWriting: exists-trace
"
    Ex row SPA data #i #j #k.
    RMPUpdate(row, SPA, 'FIRMWARE', 'NULL ASID', 'NULL GPA', 'VALID') @ i
    & Write(SPA, 'FIRMWARE', 'NULL ASID', data) @ j
    & Read(SPA, 'FIRMWARE', 'NULL ASID', data) @ k
    & #i < #j
    & #j < #k
"

lemma OnlyOwnerCanWriteToPage:
"
    All SPA owner ASID data #i.
    Write(SPA, owner, ASID, data) @ i ==>
        Ex row GPA isValid #j.
            (RMPUpdate(row, SPA, owner, ASID, GPA, isValid) @ j
            & (#j < #i)
            & not (Ex #k.
                Drop(row) @ k
                & (#j < #k)
                & (#k < #i)))
"

lemma SPAMapsToUniqueGPA:
"
    All SPA GPA1 GPA2 ASID val1 val2 row1 row2 #i #j.
    RMPUpdate(row1, SPA, 'GUEST', ASID, GPA1, val1) @ i
    & RMPUpdate(row2, SPA, 'GUEST', ASID, GPA2, val2) @ j
    & #i < #j ==>
        GPA1 = GPA2
        | (Ex #k.
            Drop(row1) @ k
            & #i < #k
            & #k < #j)
"

end
