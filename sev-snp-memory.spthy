theory SEV_SNP_MEMORY begin

functions:
    owner/1,

equations:
    owner(<x, y, z>) = x,
    owner(x) = x

restriction PointerCanBeFreedOnlyOnce:
" 
    All ptr #i #j. Free(ptr) @ i & Free(ptr) @ j ==> (#i = #j)
"

restriction FreedPointerCannotBeAccessed:
"
    All ptr SPA owner content #i #j.
    (Read(ptr, SPA, owner, content) | Write(ptr, SPA, owner, content) | RMPUpdate(ptr, SPA, owner)) @ i 
    & Free(ptr) @ j ==> (#i < #j)
"

rule InitializePage:
    [
        Fr(SPA),
        Fr(ptr)
    ]
    --[ 
        InitializePage(SPA),
        RMPUpdate(ptr, SPA, 'HYPERVISOR')
    ]->
    [ 
        !SystemPA(SPA),
        !RMPEntry(ptr, SPA, 'HYPERVISOR'),
        PageContent(SPA, '')
    ]

rule InitializeGuest:
    [ 
        Fr(GID)
    ]
    --[ 
        InitializeGuest(GID)
    ]->
    [ 
        !GuestID(GID)
    ]

rule AssignPageToFW:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, 'HYPERVISOR'),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, 'FIRMWARE')
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, 'FIRMWARE')
    ]

rule AssignPageToGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, 'HYPERVISOR'),
        !GuestID(GID)
        Fr(GPA),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, <GID, GPA, F>),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, <GID, GPA, F>),
    ]

rule ReturnPageFromGVM:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, <GID, GPA, Valid>),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, 'HYPERVISOR')
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, 'HYPERVISOR')
    ]

rule ReturnPageFromFW:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr1, SPA, 'FIRMWARE'),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, 'HYPERVISOR'),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, 'HYPERVISOR')
    ]

rule GuestValidate:
    [
        !SystemPA(SPA),
        !GuestID(GID)
        !RMPEntry(ptr1, SPA, <GID, GPA, F>),
        Fr(ptr2)
    ]
    --[
        RMPUpdate(ptr2, SPA, <GID, GPA, T>),
        Free(ptr1)
    ]->
    [
        !RMPEntry(ptr2, SPA, <GID, GPA, T>)
    ]

rule WriteToPage:
    [
        !SystemPA(SPA),
        !RMPEntry(ptr, SPA, owner),
        PageContent(SPA, oldContent),
        In(newContent)
    ]
    --[
        Write(ptr, SPA, owner, newContent)
    ]->
    [
        PageContent(SPA, newContent)
    ]

rule ReadFromPage:
    [ 
        !SystemPA(SPA),
        !RMPEntry(ptr, SPA, owner)
        PageContent(SPA, content)
    ]
    --[
        Read(ptr, SPA, owner, content)
    ]->
    [
        PageContent(SPA, content),
        Out(content)
    ]

lemma ExePageCanGoFromFWToGVM: exists-trace
"
    Ex SPA, x, y, #i, #j. TransferOwnership(SPA, 'FIRMWARE', x) @ i & 
    TransferOwnership(SPA, y, 'GUEST') @ j & i < j
"

lemma ExePageCanBeGivenToSameGVMTwice: exists-trace
"
    Ex SPA, x, y, GPA1, GPA2, #i, #j. TransferOwnership(SPA, x, 'GUEST') @ i &
    TransferOwnership(SPA, y, 'GUEST') @ j & i < j
"

lemma ExeGuestCanValidatePageAfterAssignment: exists-trace
"
    Ex SPA, GPA, pageID, x, #i, #j. TransferOwnership(SPA, x, 'GUEST') @ i &
    GuestValidate(GPA, SPA, pageID) @ j & i < j
"

lemma ExePageCanBeReadAfterWrite: exists-trace
"
    Ex SPA, owner1, owner2, content, #i, #j. Write(SPA, owner1, content) @ i &
    Read(SPA, owner2, content) @ j & i < j
"

lemma ExeGuestCanWriteAfterValidation: exists-trace
"
    Ex SPA, GPA, pageID, content, #i, #j. GuestValidate(GPA, SPA, pageID) @ i &
    Write(SPA, 'GUEST', content) @ j & i < j
"

lemma OnlyOwnerCanWriteToPage:
"
    All SPA, owner, content, #i. (Write(SPA, owner, content) @ i ==>
    (Ex prevOwner, #j. (TransferOwnership(SPA, prevOwner, owner) @ j 
    & not (Ex newOwner, #k. TransferOwnership(owner, newOwner) @ k & j < k))))
"

lemma SPAMapsToUniqueGPA:
"
    All SPA, GPA1, GPA2, ptr1, ptr2, #i, #j. RMPUpdate(SPA, GPA1, ptr1) @ i & RMPUpdate(SPA, GPA2, ptr2) @ j ==>
    GPA1 = GPA2 | (Ex #k. Free(ptr1) @ k & i < k & k < j) | (Ex #l. Free(ptr2) @ l & j < l & l < i)
"
